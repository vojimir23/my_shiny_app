)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
subset1 <- filter(DatasetTS, country == input$countryI)
subset2 <- filter(DatasetTS, country == input$countryII)
a <- subset1[1,1]
b <-subset2[1,1]
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "))+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ))+
xlab("Years") + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/Vojimir Ranitovic/Desktop/Dodatni grafici/app.R')
runApp('C:/Users/Vojimir Ranitovic/Desktop/Dodatni grafici/app.R')
library(hrbrthemes)
library(gapminder)
library(ggplot2)
library(dplyr)
library(shiny)
DatasetTS <- gapminder
ui <- fluidPage(
pageWithSidebar(
headerPanel("Naslov aplikacije"),
sidebarPanel(selectInput("countryI","Choose the GDP per Capita for the First country",unique(DatasetTS[,1])),
selectInput("countryII","Choose the GDP per Capita for the Second country",unique(DatasetTS[,1]))
),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
subset1 <- filter(DatasetTS, country == input$countryI)
subset2 <- filter(DatasetTS, country == input$countryII)
a <- subset1[1,1]
b <-subset2[1,1]
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "))+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab("Years") + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/Vojimir Ranitovic/Desktop/Dodatni grafici/app.R')
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "),size=3)+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab("Years") + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
output$distPlot <- renderPlot({
subset1 <- filter(DatasetTS, country == input$countryI)
subset2 <- filter(DatasetTS, country == input$countryII)
a <- subset1[1,1]
b <-subset2[1,1]
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "),size=3)+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab("Years") + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
})
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
subset1 <- filter(DatasetTS, country == input$countryI)
subset2 <- filter(DatasetTS, country == input$countryII)
a <- subset1[1,1]
b <-subset2[1,1]
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "),size=3)+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab("Years") + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
})
}
shinyApp(ui = ui, server = server)
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "),size=3)+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab(strong("Years")) + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
output$distPlot <- renderPlot({
subset1 <- filter(DatasetTS, country == input$countryI)
subset2 <- filter(DatasetTS, country == input$countryII)
a <- subset1[1,1]
b <-subset2[1,1]
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "),size=3)+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab(strong("Years")) + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
})
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
subset1 <- filter(DatasetTS, country == input$countryI)
subset2 <- filter(DatasetTS, country == input$countryII)
a <- subset1[1,1]
b <-subset2[1,1]
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "),size=3)+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab(strong("Years")) + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
})
}
shinyApp(ui = ui, server = server)
output$distPlot <- renderPlot({
subset1 <- filter(DatasetTS, country == input$countryI)
subset2 <- filter(DatasetTS, country == input$countryII)
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "),size=3)+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab("Years") + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
})
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
subset1 <- filter(DatasetTS, country == input$countryI)
subset2 <- filter(DatasetTS, country == input$countryII)
ggplot(subset1,aes(x=year,y=gdpPercap))+geom_line(aes(color="GDP per capita of the First "),size=3)+
geom_line(data=subset2,aes(color="GDP per capita of the second "  ),size=3)+
xlab("Years") + ylab("GDP per capita") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1),axis.text = element_text())
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("readxl")
library(leaflet)
Dataset <- read_excel("data.xlsx")
library(leaflet)
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
paste('<b>', 'Nesto:',  Population),
sep = '<br/>'))
Dataset <- read_excel("data.xlsx")
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>', 'Capital city:',  Capital City),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
sep = '<br/>'))
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>', 'Capital city:',  Capital City),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
sep = '<br/>'))
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>', 'Capital city:',  Capital City),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),sep = '<br/>'))
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>', 'Capital city:',  Capital City),paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),sep = '<br/>'))
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>', 'Capital city:',  Capital City),paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),sep = '<br/>'))
library("readxl")
library(leaflet)
Dataset <- read_excel("data.xlsx")
library(leaflet)
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>', 'Capital city:',  Capital City),paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),sep = '<br/>'))
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
paste('<b>', 'Nesto:',  Population),
sep = '<br/>'))
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
paste('<b>', 'Capital city:',  Capital_City),
sep = '<br/>'))
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
paste('<b>', 'Capital city:',  Capital_City),
sep = '<br/>'))
library("readxl")
library(leaflet)
Dataset <- read_excel("data.xlsx")
library(leaflet)
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
paste('<b>', 'Capital city:',  Capital_City),
sep = '<br/>'))
runApp()
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country), paste('<b>', 'Capital city:',  Capital_City),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
sep = '<br/>'))
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Dataset,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country), paste('<b>', 'Capital city:', '</b>', Capital_City),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
sep = '<br/>'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(theme = shinytheme("readable"),dashboardPage(
dashboardHeader(),
dashboardSidebar(sidebarMenu(
menuItem("Data view",tabName = "First", icon =icon("calendar")),
menuItem("Graphical representation",tabName = "Second", icon = icon("map")),
menuItem("GDP comparison", tabName="Third", icon =icon("map")),
menuItem("World map", tabName="Fourth", icon =icon("circle")))),
dashboardBody(
tabItems(
tabItem("First",actionButton("show","Click to see the dataset"),hr(),dataTableOutput("dataset")
),
tabItem("Second",div(h1("World's data"),linebreaks(1),style="width:300px;height:50px;padding-left:15px;"),sidebarPanel(div(selectInput("xcol","Choose the first variable (X)",names[c(3:9)]),
selectInput("ycol","Choose the second variable (Y)",names[c(3:9)])),style="width:400px;height:250px;padding-left:15px;"),
div(plotlyOutput("myplot"),style="width:1000px;padding-left:450px;"),div(h5("Summary statistics of chosen variables:"),verbatimTextOutput("sum1"),verbatimTextOutput("sum2"),style="width:400px;height:20px;padding-left:20px;"),
linebreaks(5),      div(p(h3("Short description of variables:"),br(),
strong("Income")," - Gross domestic product per person adjusted for differences in purchasing power in fixed dollars, fixed 2011 prices.",br(),
strong("CO2 emissions")," - Carbon dioxide emissions from the burning of fossil fuels ( tonnes of CO2 per person).",br(),
strong("Child mortality"), " - Death of children under five years of age per 1000 live births.",br(),
strong("Babies per woman")," - Total fertility rate. The number of children that would be born to each woman with prevailing age-specific fertility rates.",br(),
strong("Democracy index (EIU)"), " - Democracy index is using the data from EIU to express the quality of democracies as a number between 0 - 100.",br(),
strong("Percentage of women in parliaments")," - Percentage of national parliamentary seats held by women. Lower and upper houses combined."),style="width:1300px;padding-left:450px;")),
tabItem("Third",div(h1("GDP per Capita comparison in time"),style="width:1000px;height:50px;padding-left:30px;"),linebreaks(1),div(sidebarPanel(selectInput("countryI","Choose the GDP per Capita of the first country",unique(DatasetTS[,1])),
selectInput("countryII","Choose the GDP per Capita of the second country",unique(DatasetTS[,1]))
),style="width:1000px;height:250px;padding-left:15px;"), div(plotOutput("distPlot"),style="width:1000px;height:250px;padding-left:30px;")),
tabItem("Fourth", div(leafletOutput("world"),style="width:2000px;height:2000px;padding-left:5px;"), sliderInput("range","Income range",min=500,max=120000,value=Dataset[]))
)
Dataset[,3]
)
)
)
ui <- fluidPage(theme = shinytheme("readable"),dashboardPage(
dashboardHeader(),
dashboardSidebar(sidebarMenu(
menuItem("Data view",tabName = "First", icon =icon("calendar")),
menuItem("Graphical representation",tabName = "Second", icon = icon("map")),
menuItem("GDP comparison", tabName="Third", icon =icon("map")),
menuItem("World map", tabName="Fourth", icon =icon("circle")))),
dashboardBody(
tabItems(
tabItem("First",actionButton("show","Click to see the dataset"),hr(),dataTableOutput("dataset")
),
tabItem("Second",div(h1("World's data"),linebreaks(1),style="width:300px;height:50px;padding-left:15px;"),sidebarPanel(div(selectInput("xcol","Choose the first variable (X)",names[c(3:9)]),
selectInput("ycol","Choose the second variable (Y)",names[c(3:9)])),style="width:400px;height:250px;padding-left:15px;"),
div(plotlyOutput("myplot"),style="width:1000px;padding-left:450px;"),div(h5("Summary statistics of chosen variables:"),verbatimTextOutput("sum1"),verbatimTextOutput("sum2"),style="width:400px;height:20px;padding-left:20px;"),
linebreaks(5),      div(p(h3("Short description of variables:"),br(),
strong("Income")," - Gross domestic product per person adjusted for differences in purchasing power in fixed dollars, fixed 2011 prices.",br(),
strong("CO2 emissions")," - Carbon dioxide emissions from the burning of fossil fuels ( tonnes of CO2 per person).",br(),
strong("Child mortality"), " - Death of children under five years of age per 1000 live births.",br(),
strong("Babies per woman")," - Total fertility rate. The number of children that would be born to each woman with prevailing age-specific fertility rates.",br(),
strong("Democracy index (EIU)"), " - Democracy index is using the data from EIU to express the quality of democracies as a number between 0 - 100.",br(),
strong("Percentage of women in parliaments")," - Percentage of national parliamentary seats held by women. Lower and upper houses combined."),style="width:1300px;padding-left:450px;")),
tabItem("Third",div(h1("GDP per Capita comparison in time"),style="width:1000px;height:50px;padding-left:30px;"),linebreaks(1),div(sidebarPanel(selectInput("countryI","Choose the GDP per Capita of the first country",unique(DatasetTS[,1])),
selectInput("countryII","Choose the GDP per Capita of the second country",unique(DatasetTS[,1]))
),style="width:1000px;height:250px;padding-left:15px;"), div(plotOutput("distPlot"),style="width:1000px;height:250px;padding-left:30px;")),
tabItem("Fourth", div(leafletOutput("world"),style="width:2000px;height:2000px;padding-left:5px;"), sliderInput("range","Income range",min=500,max=120000,value=Dataset[]))
)
Dataset[,3]
)
)
)
Dataset[,3]
Dataset[1]
Dataset <- read_excel("data.xlsx")
Dataset[1]
Dataset[,1]
Dataset[,1]
Dataset[,3]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
subset3 <- filter(Dataset, Income==input$range)
runApp()
subset3 <- filter(Dataset, Income < input$range)
runApp()
Dataset %>%
filter(Income <= input$range)
runApp()
runApp()
runApp()
runApp()
runApp()
Dataset <- read_excel("data.xlsx")
Dataset <- read_excel("data.xlsx")
Novo <- filter(Dataset, Income > 50000)
library("readxl")
Dataset <- read_excel("data.xlsx")
Novo <- filter(Dataset, Income > 50000)
Novo <- filter(Dataset, Dataset[,3] > 50000)
Novo[,1]
Novo <- filter(Dataset, Dataset[,3] > 3)
Novo[,1]
Novo[,1]
Dataset[,3]
Novo[,1]
Novo <- filter(Dataset, Dataset[,3] < 30000)
Novo[,1]
Dataset[,3]
filter(Dataset, Income<1000)
library(dplyr)    # alternatively, this also loads %>%
filter(Dataset, Income<1000)
Novo <-filter(Dataset, Income<1000)
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Novo,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country), paste('<b>', 'Capital city:', '</b>', Capital_City),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
sep = '<br/>'))
library("readxl")
library(leaflet)
library(leaflet)
leaflet() %>%
addTiles() %>%
addProviderTiles(providers$Esri.WorldTopoMap) %>%
addMarkers(data=Novo,lng= ~Longitude, lat= ~ Latitude,  popup = ~paste(paste('<b>', 'Name of country:', '</b>', Country), paste('<b>', 'Capital city:', '</b>', Capital_City),
paste('<b>',  'Population ( in millions):', '</b>', Population/1000000),
sep = '<br/>'))
library(dplyr)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(theme = shinytheme("readable"),dashboardPage(
dashboardHeader(),
dashboardSidebar(sidebarMenu(
menuItem("Data view",tabName = "First", icon =icon("calendar")),
menuItem("Graphical representation",tabName = "Second", icon = icon("map")),
menuItem("GDP comparison", tabName="Third", icon =icon("map")),
menuItem("World map", tabName="Fourth", icon =icon("circle")))),
dashboardBody(
tabItems(
tabItem("First",actionButton("show","Click to see the dataset"),hr(),dataTableOutput("dataset")
),
tabItem("Second",div(h1("World's data"),linebreaks(1),style="width:300px;height:50px;padding-left:15px;"),sidebarPanel(div(selectInput("xcol","Choose the first variable (X)",names[c(3:9)]),
selectInput("ycol","Choose the second variable (Y)",names[c(3:9)])),style="width:400px;height:250px;padding-left:15px;"),
div(plotlyOutput("myplot"),style="width:1000px;padding-left:450px;"),div(h5("Summary statistics of chosen variables:"),verbatimTextOutput("sum1"),verbatimTextOutput("sum2"),style="width:400px;height:20px;padding-left:20px;"),
linebreaks(5),      div(p(h3("Short description of variables:"),br(),
strong("Income")," - Gross domestic product per person adjusted for differences in purchasing power in fixed dollars, fixed 2011 prices.",br(),
strong("CO2 emissions")," - Carbon dioxide emissions from the burning of fossil fuels ( tonnes of CO2 per person).",br(),
strong("Child mortality"), " - Death of children under five years of age per 1000 live births.",br(),
strong("Babies per woman")," - Total fertility rate. The number of children that would be born to each woman with prevailing age-specific fertility rates.",br(),
strong("Democracy index (EIU)"), " - Democracy index is using the data from EIU to express the quality of democracies as a number between 0 - 100.",br(),
strong("Percentage of women in parliaments")," - Percentage of national parliamentary seats held by women. Lower and upper houses combined."),style="width:1300px;padding-left:450px;")),
tabItem("Third",div(h1("GDP per Capita comparison in time"),style="width:1000px;height:50px;padding-left:30px;"),linebreaks(1),div(sidebarPanel(selectInput("countryI","Choose the GDP per Capita of the first country",unique(DatasetTS[,1])),
selectInput("countryII","Choose the GDP per Capita of the second country",unique(DatasetTS[,1]))
),style="width:1000px;height:250px;padding-left:15px;"), div(plotOutput("distPlot"),style="width:1000px;height:250px;padding-left:30px;")),
tabItem("Fourth", div(leafletOutput("world"),style="width:2000px;height:500px;padding-left:5px;"),linebreaks(5), sliderInput("range","Income range",min=500,max=120000,value=round(range(Dataset, na.rm = TRUE), 1),
step = 1000)     )
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
---
title: "README"
author: "Vojimir Ranitovic"
date: "15/04/2021"
output: pdf_document
---
```{r setup, include=FALSE}
library(parallel)
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
tinytex::install_tinytex()
runApp()
knitr::opts_chunk$set(echo = TRUE)
plot(plot())
plot<-plot %>% layout(title="Graph between variables of interests", autosize=F,width=800,height=550,showlegend = FALSE,
xaxis=list(title=~input$xcol,
zerolinewidth = 1,
ticklen = 2,
gridwidth = 2),
yaxis = list(title = input$ycol,
zerolinewidth = 1,
ticklen = 2,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'))
plot <-plot_ly(Dataset,x=~get(input$xcol),y= ~get(input$ycol), type="scatter",mode = 'markers',
size= ~Population, colors='Paired', color=~Country,
sizes=c(12,52),
marker = list(opacity = 0.5, sizemode = 'diameter', symbol="circle",line=list(width=1,color='#FFFFFF')),
text=~paste('Country:',Country,'<br>Population (in millions):', Population/1000000))
plot<-plot %>% layout(title="Graph between variables of interests", autosize=F,width=800,height=550,showlegend = FALSE,
xaxis=list(title=~input$xcol,
zerolinewidth = 1,
ticklen = 2,
gridwidth = 2),
yaxis = list(title = input$ycol,
zerolinewidth = 1,
ticklen = 2,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
plot<-plot %>% layout(title="Graph between variables of interests", autosize=F,width=800,height=550,showlegend = FALSE,
xaxis=list(title=~input$xcol,
zerolinewidth = 1,
ticklen = 2,
gridwidth = 2),
yaxis = list(title = input$ycol,
zerolinewidth = 1,
ticklen = 2,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
runApp()
```{r cars}
library(EBImage)
install.packages(EBImage)
runApp()
